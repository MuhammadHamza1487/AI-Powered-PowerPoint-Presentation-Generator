import google.generativeai as genai
from pptx import Presentation
from pptx.util import Pt
from api import open_api_key

# Function to generate content using Google Generative AI
def generate_content_gemini(api_key, topic):
    genai.configure(api_key=api_key)
    model = genai.GenerativeModel('gemini-pro')
    chat = model.start_chat(history=[])

    prompt = (
        f"I am a teacher and want to create a comprehensive PowerPoint presentation for my students about '{topic}', "
        "so I can teach them through these slides. Include sections like Introduction, Key Points, and Conclusion, "
        "with well-structured points and sub-points for each slide . Ensure each slide has enough detailed information "
        "but not too much to exceed the slide page. Break down larger sections into multiple slides if needed."
    )

    response = chat.send_message(prompt)
    return response.text.strip()

# Function to parse and structure content into slides
def parse_content(content):
    sections = content.split('\n\n')  # Assuming sections are separated by double newlines for simplicity
    slides_content = []

    for section in sections:
        if section.strip():
            lines = section.split('\n')
            title = lines[0].strip('* ').strip()
            body = '\n'.join([line.strip('* ').strip() for line in lines[1:] if line.strip()]).strip()
            slides_content.append((title, body))

    return slides_content

# Function to create slides and insert content
def create_presentation(topic, slides_content, output_path):
    prs = Presentation()

    # Title Slide
    slide_layout = prs.slide_layouts[0]
    slide = prs.slides.add_slide(slide_layout)
    title = slide.shapes.title
    subtitle = slide.placeholders[1]
    title.text = topic
    subtitle.text = "Generated by Google Generative AI"

    # Content Slides
    for title, content in slides_content:
        slide_layout = prs.slide_layouts[1]
        slide = prs.slides.add_slide(slide_layout)
        title_shape = slide.shapes.title
        body_shape = slide.placeholders[1]
        title_shape.text = title

        tf = body_shape.text_frame
        for paragraph in content.split('\n'):
            p = tf.add_paragraph()
            p.text = paragraph
            p.font.size = Pt(18)

    prs.save(output_path)

# Main function
def main():
    api_key = open_api_key
    topic = input("Enter the topic: ")

    print("Generating content, please wait...")
    content = generate_content_gemini(api_key, topic)
    print("Content generated successfully!")

    slides_content = parse_content(content)
    output_path = f"{topic.replace(' ', '_')}.pptx"
    create_presentation(topic, slides_content, output_path)
    print(f"Presentation saved as {output_path}")

if __name__ == "__main__":
    main()
